swagger: '2.0'
info:
  description: This documents describes about Test RestAPI
  version: 1.0.0
  title: Test API Documentation
host: 'localhost:9443'
basePath: /
tags:
  - name: kafka-controller
    description: Kafka Controller
  - name: mail-controller
    description: Mail Controller
  - name: user-controller
    description: User Controller
paths:
  /jpatest/user:
    get:
      tags:
        - user-controller
      summary: userList
      operationId: userListUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
              originalRef: User
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /jpatest/user/create:
    post:
      tags:
        - user-controller
      summary: createUser
      operationId: createUserUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
            originalRef: User
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/jpatest/user/{userId}':
    get:
      tags:
        - user-controller
      summary: user
      operationId: userUsingGET
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Optional«User»'
            originalRef: Optional«User»
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - user-controller
      summary: updateUser
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
            originalRef: User
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
            originalRef: User
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - user-controller
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /kafka:
    post:
      tags:
        - kafka-controller
      summary: sendMessage
      operationId: sendMessageUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: message
          in: query
          description: message
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /mail/mail:
    get:
      tags:
        - mail-controller
      summary: dispMail
      operationId: dispMailUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - mail-controller
      summary: execMail
      operationId: execMailUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: mailDto
          description: mailDto
          required: true
          schema:
            $ref: '#/definitions/MailDto'
            originalRef: MailDto
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  MailDto:
    type: object
    properties:
      address:
        type: string
      message:
        type: string
      title:
        type: string
    title: MailDto
  Optional«User»:
    type: object
    properties:
      present:
        type: boolean
    title: Optional«User»
  User:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
        format: int64
      modDt:
        type: string
        format: date-time
      modUser:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      regDt:
        type: string
        format: date-time
      regUser:
        type: string
    title: User

